import java.awt.*;
import java.awt.event.*;
import java.util.ArrayList;

// Employee Class
class Employee {
    int id;
    String name;
    double basicSalary;
    double deductions;
    double bonuses;

    public Employee(int id, String name, double basicSalary, double deductions, double bonuses) {
        this.id = id;
        this.name = name;
        this.basicSalary = basicSalary;
        this.deductions = deductions;
        this.bonuses = bonuses;
    }

    public double calculateNetSalary() {
        return basicSalary + bonuses - deductions;
    }

    @Override
    public String toString() {
        return "ID: " + id + ", Name: " + name + ", Net Salary: $" + calculateNetSalary();
    }
}

// PayrollProcessor Class
class PayrollProcessor {
    ArrayList<Employee> employeeList = new ArrayList<>();

    public void addEmployee(Employee employee) {
        employeeList.add(employee);
    }

    public String generatePayroll() {
        StringBuilder payrollReport = new StringBuilder("--- Payroll Report ---\n");
        for (Employee emp : employeeList) {
            payrollReport.append(emp.toString()).append("\n");
        }
        return payrollReport.toString();
    }

    public Employee findEmployeeById(int id) {
        for (Employee emp : employeeList) {
            if (emp.id == id) {
                return emp;
            }
        }
        return null;
    }
}

// Main Class with AWT Components
public class EmployeePayrollSystemAWT extends Frame {
    PayrollProcessor payrollProcessor = new PayrollProcessor();

    // GUI Components
    TextField idField, nameField, basicSalaryField, deductionsField, bonusesField, searchField;
    TextArea outputArea;

    public EmployeePayrollSystemAWT() {
        setLayout(new FlowLayout());

        // Title
        Label title = new Label("Employee Payroll Management System");
        title.setFont(new Font("Arial", Font.BOLD, 16));
        add(title);

        // Input Fields
        add(new Label("Employee ID:"));
        idField = new TextField(10);
        add(idField);

        add(new Label("Employee Name:"));
        nameField = new TextField(20);
        add(nameField);

        add(new Label("Basic Salary:"));
        basicSalaryField = new TextField(10);
        add(basicSalaryField);

        add(new Label("Deductions:"));
        deductionsField = new TextField(10);
        add(deductionsField);

        add(new Label("Bonuses:"));
        bonusesField = new TextField(10);
        add(bonusesField);

        // Buttons
        Button addButton = new Button("Add Employee");
        Button generateButton = new Button("Generate Payroll");
        Button searchButton = new Button("Find Employee");
        Button exitButton = new Button("Exit");

        add(addButton);
        add(generateButton);
        add(searchButton);
        add(exitButton);

        // Search Field
        add(new Label("Search by ID:"));
        searchField = new TextField(10);
        add(searchField);

        // Output Area
        outputArea = new TextArea(10, 50);
        outputArea.setEditable(false);
        add(outputArea);

        // Add Action Listeners
        addButton.addActionListener(e -> addEmployee());
        generateButton.addActionListener(e -> generatePayroll());
        searchButton.addActionListener(e -> findEmployee());
        exitButton.addActionListener(e -> System.exit(0));

        // Frame Properties
        setTitle("Employee Payroll System");
        setSize(600, 400);
        setVisible(true);

        // Close Button
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent we) {
                System.exit(0);
            }
        });
    }

    // Action Methods
    private void addEmployee() {
        try {
            int id = Integer.parseInt(idField.getText());
            String name = nameField.getText();
            double basicSalary = Double.parseDouble(basicSalaryField.getText());
            double deductions = Double.parseDouble(deductionsField.getText());
            double bonuses = Double.parseDouble(bonusesField.getText());

            Employee newEmployee = new Employee(id, name, basicSalary, deductions, bonuses);
            payrollProcessor.addEmployee(newEmployee);

            outputArea.setText("Employee added successfully!\n" + newEmployee.toString());
            clearFields();
        } catch (NumberFormatException ex) {
            outputArea.setText("Error: Invalid input. Please enter numeric values for ID, salary, deductions, and bonuses.");
        }
    }

    private void generatePayroll() {
        String payrollReport = payrollProcessor.generatePayroll();
        outputArea.setText(payrollReport.isEmpty() ? "No employees found." : payrollReport);
    }

    private void findEmployee() {
        try {
            int searchId = Integer.parseInt(searchField.getText());
            Employee foundEmployee = payrollProcessor.findEmployeeById(searchId);
            if (foundEmployee != null) {
                outputArea.setText("Employee Found:\n" + foundEmployee.toString());
            } else {
                outputArea.setText("Employee not found.");
            }
        } catch (NumberFormatException ex) {
            outputArea.setText("Error: Invalid ID. Please enter a numeric value.");
        }
    }

    private void clearFields() {
        idField.setText("");
        nameField.setText("");
        basicSalaryField.setText("");
        deductionsField.setText("");
        bonusesField.setText("");
    }

    public static void main(String[] args) {
        new EmployeePayrollSystemAWT();
    }
}